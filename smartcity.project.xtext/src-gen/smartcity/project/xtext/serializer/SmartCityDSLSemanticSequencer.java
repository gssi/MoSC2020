/*
 * generated by Xtext 2.19.0
 */
package smartcity.project.xtext.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import smartcity.DataAnalytics.BoolValue;
import smartcity.DataAnalytics.DataAnalyticsPackage;
import smartcity.DataAnalytics.DataPackage;
import smartcity.DataAnalytics.IntegerValue;
import smartcity.DataAnalytics.OpenData;
import smartcity.DataAnalytics.ProvidedData;
import smartcity.DataAnalytics.RealValue;
import smartcity.DataAnalytics.SocialMedia;
import smartcity.SmartCity;
import smartcity.SmartCityModel;
import smartcity.SmartcityPackage;
import smartcity.infrastructure.Actuator;
import smartcity.infrastructure.InfrastructureComponent;
import smartcity.infrastructure.InfrastructurePackage;
import smartcity.infrastructure.MonitoringInfrastructure;
import smartcity.infrastructure.PublicInfrastructureLayer;
import smartcity.infrastructure.Sensor;
import smartcity.project.xtext.services.SmartCityDSLGrammarAccess;
import smartcity.stakeholder.Stakeholder;
import smartcity.stakeholder.StakeholderPackage;

@SuppressWarnings("all")
public class SmartCityDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SmartCityDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DataAnalyticsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DataAnalyticsPackage.BOOL_VALUE:
				sequence_BoolValue(context, (BoolValue) semanticObject); 
				return; 
			case DataAnalyticsPackage.DATA_PACKAGE:
				sequence_DataPackage(context, (DataPackage) semanticObject); 
				return; 
			case DataAnalyticsPackage.INTEGER_VALUE:
				sequence_IntegerValue(context, (IntegerValue) semanticObject); 
				return; 
			case DataAnalyticsPackage.OPEN_DATA:
				sequence_OpenData(context, (OpenData) semanticObject); 
				return; 
			case DataAnalyticsPackage.PROVIDED_DATA:
				sequence_ProvidedData(context, (ProvidedData) semanticObject); 
				return; 
			case DataAnalyticsPackage.REAL_VALUE:
				sequence_RealValue(context, (RealValue) semanticObject); 
				return; 
			case DataAnalyticsPackage.SOCIAL_MEDIA:
				sequence_SocialMedia(context, (SocialMedia) semanticObject); 
				return; 
			}
		else if (epackage == InfrastructurePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case InfrastructurePackage.ACTUATOR:
				sequence_Actuator(context, (Actuator) semanticObject); 
				return; 
			case InfrastructurePackage.INFRASTRUCTURE_COMPONENT:
				sequence_InfrastructureComponent_Impl(context, (InfrastructureComponent) semanticObject); 
				return; 
			case InfrastructurePackage.MONITORING_INFRASTRUCTURE:
				sequence_MonitoringInfrastructure(context, (MonitoringInfrastructure) semanticObject); 
				return; 
			case InfrastructurePackage.PUBLIC_INFRASTRUCTURE_LAYER:
				sequence_PublicInfrastructureLayer(context, (PublicInfrastructureLayer) semanticObject); 
				return; 
			case InfrastructurePackage.SENSOR:
				sequence_Sensor(context, (Sensor) semanticObject); 
				return; 
			}
		else if (epackage == SmartcityPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SmartcityPackage.SMART_CITY:
				sequence_SmartCity(context, (SmartCity) semanticObject); 
				return; 
			case SmartcityPackage.SMART_CITY_MODEL:
				sequence_SmartCityModel(context, (SmartCityModel) semanticObject); 
				return; 
			}
		else if (epackage == StakeholderPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case StakeholderPackage.STAKEHOLDER:
				sequence_Stakeholder(context, (Stakeholder) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     IoTDev returns Actuator
	 *     Actuator returns Actuator
	 *
	 * Constraint:
	 *     (model=EString? location=EString?)
	 */
	protected void sequence_Actuator(ISerializationContext context, Actuator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Data returns BoolValue
	 *     BoolValue returns BoolValue
	 *
	 * Constraint:
	 *     (name=EString value=EBoolean unit=EString? src=[Source|EString]?)
	 */
	protected void sequence_BoolValue(ISerializationContext context, BoolValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DataPackage returns DataPackage
	 *
	 * Constraint:
	 *     (name=EString (data+=Data data+=Data*)?)
	 */
	protected void sequence_DataPackage(ISerializationContext context, DataPackage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InfrastructureComponent returns InfrastructureComponent
	 *     InfrastructureComponent_Impl returns InfrastructureComponent
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_InfrastructureComponent_Impl(ISerializationContext context, InfrastructureComponent semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, InfrastructurePackage.Literals.INFRASTRUCTURE_COMPONENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, InfrastructurePackage.Literals.INFRASTRUCTURE_COMPONENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInfrastructureComponent_ImplAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Data returns IntegerValue
	 *     IntegerValue returns IntegerValue
	 *
	 * Constraint:
	 *     (name=EString value=EInt unit=EString? src=[Source|EString]?)
	 */
	protected void sequence_IntegerValue(ISerializationContext context, IntegerValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InfrastructureComponent returns MonitoringInfrastructure
	 *     MonitoringInfrastructure returns MonitoringInfrastructure
	 *
	 * Constraint:
	 *     (name=EString (devices+=IoTDev devices+=IoTDev*)?)
	 */
	protected void sequence_MonitoringInfrastructure(ISerializationContext context, MonitoringInfrastructure semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Source returns OpenData
	 *     OpenData returns OpenData
	 *
	 * Constraint:
	 *     (name=EString url=EString?)
	 */
	protected void sequence_OpenData(ISerializationContext context, OpenData semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Source returns ProvidedData
	 *     ProvidedData returns ProvidedData
	 *
	 * Constraint:
	 *     (provider+=[Stakeholder|EString] provider+=[Stakeholder|EString]*)?
	 */
	protected void sequence_ProvidedData(ISerializationContext context, ProvidedData semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PublicInfrastructureLayer returns PublicInfrastructureLayer
	 *
	 * Constraint:
	 *     (name=EString (components+=InfrastructureComponent components+=InfrastructureComponent*)?)
	 */
	protected void sequence_PublicInfrastructureLayer(ISerializationContext context, PublicInfrastructureLayer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Data returns RealValue
	 *     RealValue returns RealValue
	 *
	 * Constraint:
	 *     (name=EString value=EDouble unit=EString? src=[Source|EString]?)
	 */
	protected void sequence_RealValue(ISerializationContext context, RealValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IoTDev returns Sensor
	 *     Sensor returns Sensor
	 *
	 * Constraint:
	 *     (model=EString? location=EString?)
	 */
	protected void sequence_Sensor(ISerializationContext context, Sensor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SmartCityModel returns SmartCityModel
	 *
	 * Constraint:
	 *     (smartCities+=SmartCity smartCities+=SmartCity*)?
	 */
	protected void sequence_SmartCityModel(ISerializationContext context, SmartCityModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SmartCity returns SmartCity
	 *
	 * Constraint:
	 *     (
	 *         city=EString? 
	 *         (stakeholders+=Source stakeholders+=Source*)? 
	 *         (data+=DataPackage data+=DataPackage*)? 
	 *         infrastructurelayer=PublicInfrastructureLayer?
	 *     )
	 */
	protected void sequence_SmartCity(ISerializationContext context, SmartCity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Source returns SocialMedia
	 *     SocialMedia returns SocialMedia
	 *
	 * Constraint:
	 *     (name=EString url=EString?)
	 */
	protected void sequence_SocialMedia(ISerializationContext context, SocialMedia semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Source returns Stakeholder
	 *     Stakeholder returns Stakeholder
	 *
	 * Constraint:
	 *     (name=EString organization=EString?)
	 */
	protected void sequence_Stakeholder(ISerializationContext context, Stakeholder semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
