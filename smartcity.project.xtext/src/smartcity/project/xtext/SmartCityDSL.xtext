// automatically generated by Xtext
grammar smartcity.project.xtext.SmartCityDSL with org.eclipse.xtext.common.Terminals

import "platform:/resource/smartcity.project.metamodel/model/smartcity.ecore" as smartcity
import "platform:/resource/smartcity.project.metamodel/model/smartcity.ecore#//stakeholder" as stakeholder
import "platform:/resource/smartcity.project.metamodel/model/smartcity.ecore#//infrastructure" as infrastructure
import "platform:/resource/smartcity.project.metamodel/model/smartcity.ecore#//DataAnalytics" as dataanalytics
//import "http://cs.gssi.it/smartcity/dataanalytics" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
//import "http://cs.gssi.it/smartcity/stakeholder" as stakeholder
//import "http://cs.gssi.it/smartcity/infrastructure" as infrastructure
//import "http://cs.gssi.it/smartcity" as smartcity

SmartCityModel returns smartcity::SmartCityModel:
	{smartcity::SmartCityModel}
		('smartCities' '{' smartCities+=SmartCity ( "," smartCities+=SmartCity)* '}' )?
	;


Source returns dataanalytics::Source:
	SocialMedia | OpenData | ProvidedData | Stakeholder;



Data returns dataanalytics::Data:
	RealValue | BoolValue | IntegerValue;

InfrastructureComponent returns infrastructure::InfrastructureComponent:
	InfrastructureComponent_Impl | MonitoringInfrastructure;


IoTDev returns infrastructure::IoTDev:
	Sensor | Actuator;

SmartCity returns smartcity::SmartCity:
	{smartcity::SmartCity}
	('city' city=EString)?
	'{'
		('stakeholders' '{' stakeholders+=Source ( "," stakeholders+=Source)* '}' )?
		('data' '{' data+=DataPackage ( "," data+=DataPackage)* '}' )?
		('infrastructurelayer' infrastructurelayer=PublicInfrastructureLayer)?
	'}';

EString returns ecore::EString:
	STRING | ID;

DataPackage returns dataanalytics::DataPackage:
	{dataanalytics::DataPackage}
	'dataPackage'
	name=EString
	'{'
		(data+=Data ( "," data+=Data)*)?
	'}';

PublicInfrastructureLayer returns infrastructure::PublicInfrastructureLayer:
	{infrastructure::PublicInfrastructureLayer}
//	'PublicInfrastructureLayer'
	name=EString
	'{'
		('components' '{' components+=InfrastructureComponent ( "," components+=InfrastructureComponent)* '}' )?
	'}';

SocialMedia returns dataanalytics::SocialMedia:
	{dataanalytics::SocialMedia}
	'socialMedia' name=EString '['('url'':' url=EString)?']'
	;

OpenData returns dataanalytics::OpenData:
	{dataanalytics::OpenData}
	'openData' name=EString '['('url'':' url=EString)?']'
	;

ProvidedData returns dataanalytics::ProvidedData:
	{dataanalytics::ProvidedData}
	'providedData'
	'{'
		(provider+=[stakeholder::Stakeholder|EString] ( "," provider+=[stakeholder::Stakeholder|EString])*)?
	'}';

Stakeholder returns stakeholder::Stakeholder:
	{stakeholder::Stakeholder}
//	'stakeholder'
	'organization' name=EString ('organizationName' organization=EString)?
	;

RealValue returns dataanalytics::RealValue:
	{dataanalytics::RealValue}
	'real' name=EString '=' value=EDouble '('(unit=EString)?')' '['(src=[dataanalytics::Source|EString])?']'
	;

BoolValue returns dataanalytics::BoolValue:
	{dataanalytics::BoolValue}
	'bool' name=EString '=' value=EBoolean '('(unit=EString)?')' '['(src=[dataanalytics::Source|EString])?']'
	;

IntegerValue returns dataanalytics::IntegerValue:
	{dataanalytics::IntegerValue}
	'int' name=EString '=' value=EInt '('(unit=EString)?')' '['(src=[dataanalytics::Source|EString])?']'
	;

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

EInt returns ecore::EInt:
	'-'? INT;

InfrastructureComponent_Impl returns infrastructure::InfrastructureComponent:
	{infrastructure::InfrastructureComponent}
	'infrastructureComponent'
	name=EString;

MonitoringInfrastructure returns infrastructure::MonitoringInfrastructure:
	{infrastructure::MonitoringInfrastructure}
	'monitoringInfrastructure'
	name=EString
	'{'
		(devices+=IoTDev ( "," devices+=IoTDev)*)?
	'}';

Sensor returns infrastructure::Sensor:
	{infrastructure::Sensor}
	'sensor' (model=EString)? ('[''location' '=' location=EString']')?
	;

Actuator returns infrastructure::Actuator:
	{infrastructure::Actuator}
	'actuator' (model=EString)? ('[''location' '=' location=EString']')?
	;
